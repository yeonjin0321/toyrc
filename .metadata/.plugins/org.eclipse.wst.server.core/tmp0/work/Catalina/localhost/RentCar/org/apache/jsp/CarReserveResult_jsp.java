/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.43
 * Generated at: 2022-09-06 10:53:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import db.CarListBean;
import db.RentcarDAO;
import java.text.SimpleDateFormat;
import java.util.Date;

public final class CarReserveResult_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("db.CarListBean");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("db.RentcarDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <!-- 한글이 넘어올수도 있기 때문에 문자셋설정을 다시한다. -->\r\n");
      out.write(" \r\n");
      out.write("    ");

        request.setCharacterEncoding("UTF-8");
    
      out.write("\r\n");
      out.write("    <!-- 한번에 빈클래스에 있는 값들을 받아야되서 useBean 사용 -->\r\n");
      out.write("    ");
      db.CarReserveBean rbean = null;
      rbean = (db.CarReserveBean) _jspx_page_context.getAttribute("rbean", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (rbean == null){
        rbean = new db.CarReserveBean();
        _jspx_page_context.setAttribute("rbean", rbean, javax.servlet.jsp.PageContext.PAGE_SCOPE);
        out.write("\r\n");
        out.write("        ");
        org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("rbean"), request);
        out.write("\r\n");
        out.write("    ");
      }
      out.write("\r\n");
      out.write(" \r\n");
      out.write("    ");

        //로그인한 아이디가 페이지가 변경되어도 유지가 되어야하기 때문에 세션으로 받는다.
        //받는 아이디는 오브젝트 타입이기 때문에 String 타입으로 타입변환을 시켜준다.
        String id = (String) session.getAttribute("id");
 
        //null값과 비교할시에는 GUEST값이 나와버리므로 
        //null 대신에 GUEST와 비교한다.
        //비교한후에 참이면 (로그인이 안되었으면) 로그인페이지로 이동하게함
        if (id == null) {
    
      out.write("\r\n");
      out.write(" \r\n");
      out.write("    <script>\r\n");
      out.write("        //예약할시에 로그인이 안되어있을경우 출력되는 메시지\r\n");
      out.write("        alert(\"로그인후 예약이 가능합니다.\");\r\n");
      out.write("        //로그인이 안되어있을경우 로그인 페이지로 이동\r\n");
      out.write("        location.href = 'RentcarMain.jsp?center=MemberLogin.jsp';\r\n");
      out.write("    </script>\r\n");
      out.write(" \r\n");
      out.write("    ");

        }
        //날짜 비교 (현재 날짜보다 앞에 날짜는 선택 못하게 하기.. )
        Date d1 = new Date();
        Date d2 = new Date();
        //날짜를 2016-4-4 로 포맷해주는 클래스 선언, month은 대문자 M을 사용
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
 
        //d1은 yyyy-MM-dd 형식으로 변경된다.
        d1 = sdf.parse(rbean.getRday());
        //d2는 yyyy-MM-dd 형식으로 변경된다.
        d2 = sdf.parse(sdf.format(d2));
 
        //날짜 비교 메소드를 사용가능 date 클래스 사용
 
        int compare = d1.compareTo(d2);
        //예약하려는 날짜보다 현재 날짜가 크다면 -1을 반환
        //예약하려는 날짜와 현재 날짜가 같다면 0을 반환
        //예약하려는 날짜가 더 크다면 1을 리턴함
 
        if (compare < 0) {
            //오늘보다 이전 날짜 선택시 예약이 안되게끔 해야함
    
      out.write("\r\n");
      out.write(" \r\n");
      out.write("    <script>\r\n");
      out.write("        alert(\"현재 시스템 날짜보다 이전 날짜는 선택할 수 없음\");\r\n");
      out.write("        history.go(-1);//이전 단계로 이동하시오.\r\n");
      out.write("    </script>\r\n");
      out.write(" \r\n");
      out.write("    ");

        }
        //결과적으로 아무런 문제가 없다면 데이터 저장후 결과 페이지로 이동하기
        //아이디값이 빈 클래스에 없고, 세션에 저장시켰기 때문
        //id는 null값이 들어갈수 있으므로 변수이름을 id1 으로 한다.
        String id1 = (String) session.getAttribute("id");
        rbean.setId(id1);
 
        //데이터베이스에 빈클래스를 저장함
        RentcarDAO rdao = new RentcarDAO();
        rdao.setReserveCar(rbean);
 
        //차량정보 얻어오기 CarReserveBean에는 차량 사진이 저장되어 있지 않기때문에 다른곳에서 얻어와야 한다.
        CarListBean cbean = rdao.getOneCar(rbean.getNo());
 
        //차량 총 금액, 금액 * 차량 대수 * 빌리는 날짜
        int totalcar = cbean.getPrice() * rbean.getQty() * rbean.getDday();
        //옵션 금액
        int usein = 0;
        if (rbean.getUsein() == 1)
            usein = 10000;
 
        int usewifi = 0;
        if (rbean.getUsewifi() == 1)
            usewifi = 10000;
 
        int useseat = 0;
        if (rbean.getUseseat() == 1)
            useseat = 10000;
 
        //옵션의 총금액 (보험 등등등)
        int totaloption = (rbean.getQty() * rbean.getDday()) * (usein + usewifi + useseat);
    
      out.write("\r\n");
      out.write("    <center>\r\n");
      out.write("        <table width=\"1000\">\r\n");
      out.write("            <tr height=\"100\">\r\n");
      out.write("                <td align=\"center\"><font size=\"6\" color=\"gray\"> 차량 예약 완료\r\n");
      out.write("                        화면 </font></td>\r\n");
      out.write("            </tr>\r\n");
      out.write(" \r\n");
      out.write("            <tr>\r\n");
      out.write("                <td align=\"center\"><img alt=\"\" src=\"./img");
      out.print(cbean.getImg());
      out.write("\"\r\n");
      out.write("                    width=\"470\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write(" \r\n");
      out.write("            <tr height=\"50\">\r\n");
      out.write("                <td align=\"center\"><font size=\"5\" color=\"red\"> 차량 총예약 금액\r\n");
      out.write("                        ");
      out.print(totalcar);
      out.write("원\r\n");
      out.write("                </font></td>\r\n");
      out.write("            </tr>\r\n");
      out.write(" \r\n");
      out.write("            <tr height=\"50\">\r\n");
      out.write("                <td align=\"center\"><font size=\"5\" color=\"red\"> 차량 총옵션 금액\r\n");
      out.write("                        ");
      out.print(totaloption);
      out.write("원\r\n");
      out.write("                </font></td>\r\n");
      out.write("            </tr>\r\n");
      out.write(" \r\n");
      out.write("            <tr height=\"50\">\r\n");
      out.write("                <td align=\"center\"><font size=\"5\" color=\"red\"> 차량 총 금액 ");
      out.print(totaloption + totalcar);
      out.write("원\r\n");
      out.write("                </font></td>\r\n");
      out.write("            </tr>\r\n");
      out.write(" \r\n");
      out.write("        </table>\r\n");
      out.write("    </center>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
