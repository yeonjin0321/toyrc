/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.43
 * Generated at: 2022-08-30 12:19:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import model.BoardBean;
import java.util.Vector;
import model.BoardDAO;

public final class BoardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("model.BoardDAO");
    _jspx_imports_classes.add("java.util.Vector");
    _jspx_imports_classes.add("model.BoardBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<body>\r\n");
      out.write(" \t<!-- \r\n");
      out.write(" \t총 게시글이 184개가 있다. 1->11\r\n");
      out.write(" \t int pageSize = 10;\r\n");
      out.write(" \t pageNum 처음에 들어오면 null이기에 1로 설정.\r\n");
      out.write(" \t  int count = 0; //전체 글의 갯수를 저장(처음게시글 184부터 숫자)  number = count - (currentPage - 1) * pageSize\r\n");
      out.write("      int number = 0; //페이지 넘버링 변수\r\n");
      out.write("      currentPage는  =1\r\n");
      out.write("      Count 184개가 있다면.\r\n");
      out.write("      [1 2 3 4 5 6 7 8 9 10]\r\n");
      out.write("      startRow =1 (currentpage-1)*pageSize+1;\r\n");
      out.write("      endRow =10  currentPage*pageSize //  1*10\r\n");
      out.write(" \t -->\r\n");
      out.write("   <center>\r\n");
      out.write("        <h2>전체 게시글 보기</h2>\r\n");
      out.write("        <!-- 게시글 보기에 카운터링을 설정하기위한 변수들을 선언 -->\r\n");
      out.write(" \r\n");
      out.write("        ");

            //10개씩 끊어서 화면에 보여주기
            //화면에 보여질 게시글의 개수를 지정
            int pageSize = 10;
 
            //현재 카운터를 클릭한 번호값을 읽어옴 (예를들어 1을 클릭하면 1~10개 까지 나오고, 2를 클릭하면 11~20개 까지 나오도록 하는것)
 
            String pageNum = request.getParameter("pageNum");
            //만약 처음 boardlist.jsp를 클릭하거나 수정 삭제 등 다른 게시글에서 이 페이지로 넘어오면 pageNum값이 없기에 null 처리를 해줌
            //다른페이지에서 num을 넘긴적이 없기때문에 최초의 list페이지를 보여주어야 한다.
 
            if (pageNum == null) {
                pageNum = "1";
            }
            int count = 0; //전체 글의 갯수를 저장
            int number = 0; //페이지 넘버링 변수
 
            //현재 보고자 하는 페이지 숫자를 저장 (원래 String 타입이이었으니 타입변환을 시킨다.)
            int currentPage = Integer.parseInt(pageNum);
 
            //전체 게시글의 내용을 jsp쪽으로 가져와야함
            //길이를 정확히 알 수 없기 때문에 가변길이인 벡터로 받는다.
            BoardDAO bdao = new BoardDAO();
 
            //전체 게시글의 갯수를 읽어들이는 메소드 호출 (카운터링할려면 전체 게시글의 숫자가 필요하기 때문)
            count = bdao.getAllCount();
 
            //현재 페이지에 보여줄 시작번호를 설정(최신글을 보여주기 위해서. 예를 들면 77번째글이 최신이면 77부터 67번째까지의 게시글을 첫페이지에 보여줌)
            int startRow = (currentPage - 1) * pageSize + 1;
            int endRow = currentPage * pageSize;
 
            //최신글 10개를 기준으로 게시글을 리턴 받아주는 메소드 호출
            Vector<BoardBean> vec = bdao.getAllBoard(startRow, endRow);
 
            //테이블에 표시할 번호를 지정
            number = count - (currentPage - 1) * pageSize;
        
      out.write("\r\n");
      out.write(" \r\n");
      out.write("        <table width=\"700\" border=\"1\" bgcolor=\"skyblue\">\r\n");
      out.write("            <tr height=\"40\">\r\n");
      out.write("                <td align=\"right\" colspan=\"5\">\r\n");
      out.write("                    <!-- 버튼을 클릭하면 BoardWriteForm.jsp파일로 넘어간다.--> \r\n");
      out.write("                    <input type=\"button\"\r\n");
      out.write("                    value=\"글쓰기\" onclick=\"location.href='BoardWriteForm.jsp'\">\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr height=\"40\">\r\n");
      out.write(" \r\n");
      out.write("                <td width=\"50\" align=\"center\">번호</td>\r\n");
      out.write("                <td width=\"350\" align=\"center\">제목</td>\r\n");
      out.write("                <td width=\"100\" align=\"center\">작성자</td>\r\n");
      out.write("                <td width=\"150\" align=\"center\">작성일</td>\r\n");
      out.write("                <td width=\"50\" align=\"center\">조회수</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                for (int i = 0; i < vec.size(); i++) {
                    BoardBean bean = vec.get(i); //벡터에 저장되어있는 bean클래스를 하나씩 추출
            
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("            <tr height=\"40\">\r\n");
      out.write("                <!-- 리스트 맨위의 숫자가 가장크고 밑으로 내려오면 감소되기때문에 숫자를 감소시켜서 표시한다. -->\r\n");
      out.write("                <td width=\"50\" align=\"center\">");
      out.print(number--);
      out.write("</td>\r\n");
      out.write("                <!-- 숫자가 하나씩 올라가게 하기위해서 i+1을 해준다 -->\r\n");
      out.write("                <!-- getNum()을 쓰면 순서가 복잡해지기 때문 -->\r\n");
      out.write("                <td width=\"320\" align=\"center\"><a href=\"BoardInfo.jsp?num=");
      out.print(bean.getNum());
      out.write("\"\r\n");
      out.write("                    style=\"text-decoration: none\"> <!-- 리플 옆에 선을 사라지게 만드는 코드 --> \r\n");
      out.write("                    \r\n");
      out.write("                    \r\n");
      out.write("                    \r\n");
      out.write("                    ");

     //답변 들여쓰기를 하기위한 for문
         if (bean.getRe_step() > 1) {
             for (int j = 0; j < (bean.getRe_step() - 1) * 5; j++) {
 				
      out.write("\t&nbsp;\r\n");
      out.write(" \r\n");
      out.write("  ");

     }
 
         }
 
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" ");
      out.print(bean.getSubject());
      out.write("\r\n");
      out.write(" \r\n");
      out.write(" </a></td>\r\n");
      out.write("                <!-- BoardInfo.jsp파일(정보를 확인하기 위한파일)에 Num값을 넘겨준다 작성자 작성일 조회수-->\r\n");
      out.write("                <td width=\"100\" align=\"center\">");
      out.print(bean.getWriter());
      out.write("</td> \r\n");
      out.write("                <td width=\"150\" align=\"center\">");
      out.print(bean.getReg_date());
      out.write("</td>\r\n");
      out.write("                <td width=\"80\" align=\"center\">");
      out.print(bean.getReadcount());
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                }
            
      out.write("\r\n");
      out.write(" \r\n");
      out.write("        </table>\r\n");
      out.write("        <p>\r\n");
      out.write("            <!-- 페이지 카운터링 소스를 작성 -->\r\n");
      out.write("            ");

                if (count > 0) {
                    int pageCount = count / pageSize + (count % pageSize == 0 ? 0 : 1); //카운터링 숫자를 얼마까지 보여줄건지 결정
 
                    //시작 페이지 숫자를 설정
                    int startPage = 1;
 
                    if (currentPage % 10 != 0) {
                        startPage = (int) (currentPage / 10) * 10 + 1;
 
                    } else {
                        startPage = ((int) (currentPage / 10) - 1) * 10 + 1;
                    }
 
                    int pageBlock = 10; //카운터링 처리 숫자
                    
                   //끝페이지 처리
                    int endPage = startPage + pageBlock - 1; //화면에 보여질 페이지의 마지막 숫자
 
                    if (endPage > pageCount)
                        endPage = pageCount;
 
                    //이전이라는 링크를 만들건지 파악 11로갔을때 이전 생김
                    if (startPage > 10) {
            
      out.write("\r\n");
      out.write("            <a href=\"BoardList.jsp?pageNum=");
      out.print( startPage - 10 );
      out.write("\"> [이전] </a>\r\n");
      out.write("            ");

                }
 
                    //페이징 처리
                    for (int i = startPage; i <= endPage; i++) {
            
      out.write("\r\n");
      out.write("            <a href=\"BoardList.jsp?pageNum=");
      out.print(i);
      out.write("\"> [");
      out.print(i);
      out.write("]\r\n");
      out.write("            </a>\r\n");
      out.write("            ");

                }
 
                    //다음이라는 링크를 만들건지 파악
                    if (endPage < pageCount) {
            
      out.write("\r\n");
      out.write("            <a href=\"BoardList.jsp?pageNum=");
      out.print( startPage + 10 );
      out.write("\"> [다음] </a>\r\n");
      out.write("            ");

                }
 
                }
            
      out.write("\r\n");
      out.write("        <!-- 12345678910[다음]\r\n");
      out.write("        \t\t[이전] 11121314151617181920[다음]\r\n");
      out.write("          -->\r\n");
      out.write("    </center>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
